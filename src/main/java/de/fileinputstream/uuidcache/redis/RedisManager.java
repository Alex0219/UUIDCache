package de.fileinputstream.uuidcache.redis;

import de.fileinputstream.uuidcache.UUIDCacheBootstrap;
import de.fileinputstream.uuidcache.cache.UUIDCache;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

import java.time.Duration;

/**
 * This class has been generated by Alexander on 29.04.18 22:02
 * You are not allowed to edit this resource or other components of it
 * Â© 2018 Alexander Fiedler
 */
public class RedisManager {


    public final JedisPoolConfig poolConfig = buildPoolConfig();
    public JedisPool jedisPool;

    /**
     * Connects to the redis database with host and port.
     * @param host
     * @param port
     */
    public void connectToRedis(String host, int port) {
        jedisPool = new JedisPool(host, port);
        System.out.println("Connected to redis server at " + host + ":" + port + " using password: no");
    }
    
    /**
     * Returns a @{@link Jedis} instance from the Jedis pool.
     *
     * @return
     */
    public Jedis getJedis() {
        Jedis jedis = null;
        try  {
            jedis = jedisPool.getResource();
            if(UUIDCacheBootstrap.getInstance().getConfig().getBoolean("AuthUsingPassword")){
                jedis.auth(UUIDCacheBootstrap.getInstance().getConfig().getString("RedisPassword"));
            }
            return jedis;
        } finally{
            getJedis().close();
        }
    }

    /**
     * Builds up the Jedis pool config. The pool balances the system's resources.
     *
     * @return
     */
    private JedisPoolConfig buildPoolConfig() {
        final JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxTotal(128);
        poolConfig.setMaxIdle(128);
        poolConfig.setMinIdle(16);
        poolConfig.setTestOnBorrow(true);
        poolConfig.setTestOnReturn(true);
        poolConfig.setTestWhileIdle(true);
        poolConfig.setMinEvictableIdleTimeMillis(Duration.ofSeconds(60).toMillis());
        poolConfig.setTimeBetweenEvictionRunsMillis(Duration.ofSeconds(30).toMillis());
        poolConfig.setNumTestsPerEvictionRun(3);
        poolConfig.setBlockWhenExhausted(true);
        return poolConfig;
    }
}
