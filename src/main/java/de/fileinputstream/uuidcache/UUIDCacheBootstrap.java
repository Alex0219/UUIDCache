package de.fileinputstream.uuidcache;

import de.fileinputstream.uuidcache.commands.CommandUUID;
import de.fileinputstream.uuidcache.commands.CommandUncacheUUID;
import de.fileinputstream.uuidcache.redis.RedisManager;
import de.fileinputstream.uuidcache.cache.UUIDCache;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * This class has been generated by Alexander on 29.04.18 21:57
 * You are not allowed to edit this resource or other components of it
 * Â© 2018 Alexander Fiedler
 */
public class UUIDCacheBootstrap extends JavaPlugin {

    public static UUIDCacheBootstrap instance;
    public final ExecutorService mainService = Executors.newCachedThreadPool();
    public final ExecutorService redisService = Executors.newFixedThreadPool(4);
    public final RedisManager redisManager = new RedisManager();
    public final UUIDCache uuidCache = new UUIDCache();

    public String redisHost;
    public int redisPort;
    public String redisPassword;

    @Override
    public void onEnable() {
        instance = this;
        writeConfig();
        loadConfig();
        getCommand("uuid").setExecutor(new CommandUUID());
        getCommand("uncacheuuid").setExecutor(new CommandUncacheUUID());

    }

    public void writeConfig() {
        getConfig().options().copyDefaults(true);
        getConfig().addDefault("RedisHost","127.0.0.1");
        getConfig().addDefault("RedisPort",6379);
        getConfig().addDefault("AuthUsingPassword",false);
        getConfig().addDefault("RedisPassword","MyPassword"); //not necessary when 'AuthUsingPassword' is set to false
        saveConfig();
    }

    public void loadConfig() {
        this.redisHost = getConfig().getString("RedisHost");
        this.redisPort = getConfig().getInt("RedisPort");
        if(getConfig().getBoolean("AuthUsingPassword")) {
            this.redisPassword = getConfig().getString("RedisPassword");
            redisService.execute(() -> redisManager.connectToRedis(redisHost,redisPort,redisPassword));
        } else {
            this.redisPassword = "";
            redisService.execute(() -> redisManager.connectToRedis(redisHost,redisPort));
        }

    }

    @Override
    public void onDisable() {
        instance = null;
    }

    public ExecutorService getMainService() {
        return mainService;
    }

    public ExecutorService getRedisService() {
        return redisService;
    }

    public RedisManager getRedisManager() {
        return redisManager;
    }

    public UUIDCache getUuidCache() {
        return uuidCache;
    }

    public String getRedisPassword() {
        return redisPassword;
    }

    public int getRedisPort() {
        return redisPort;
    }

    public String getRedisHost() {
        return redisHost;
    }

    public static UUIDCacheBootstrap getInstance() {
        return instance;
    }
}
